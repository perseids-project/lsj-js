{"version":3,"sources":["components/Loading/Loading.module.css","components/Loading/index.js","components/Loading/Loading.js","lib/Parser.js","components/Lookup/index.js","components/Lookup/Lookup.js","components/AsyncLookup/AsyncLookup.js","components/AsyncLookup/index.js","components/App/index.js","components/App/App.js","registerServiceWorker.js","index.js"],"names":["module","exports","loadingSpinner","spin","Loading","_ref","text","react_default","a","createElement","className","concat","styles","Parser","dictionary","Object","classCallCheck","this","matchers","exact","greek","latin","string","key","toLowerCase","normalize","results","headwords","forEach","matcher","headword","push","definition","Lookup","props","_this","possibleConstructorReturn","getPrototypeOf","call","parser","handleChange","bind","assertThisInitialized","renderEntries","event","value","target","history","word","lookup","map","entry","dangerouslySetInnerHTML","__html","match","params","autoFocus","type","onChange","placeholder","aria-label","Component","cacheDictionary","loaded","default","localForage","clear","then","setItem","WaitForDownload","Loadable","loader","__webpack_require__","e","loading","components_Loading","render","components_Lookup","assign","AsyncLookup","getItem","d","success","catch","App","Fragment","build","react_router_dom","basename","process","react_router","path","component","github","report","isLocalhost","Boolean","window","location","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","error","ReactDOM","components_App","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.3edbd3a0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingSpinner\":\"Loading_loadingSpinner__3AFTQ\",\"spin\":\"Loading_spin__27TzB\"};","import Loading from './Loading';\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Loading.module.css';\n\nconst Loading = ({ text }) => (\n  <div className=\"mt-2\">\n    <div className={`${styles.loadingSpinner} mb-2`} />\n    {text}\n  </div>\n);\n\nLoading.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Loading;\n","class Parser {\n  constructor(dictionary) {\n    this.matchers = [dictionary.exact, dictionary.greek, dictionary.latin];\n    this.dictionary = dictionary.dictionary;\n  }\n\n  lookup(string) {\n    const key = string.toLowerCase().normalize();\n    const results = [];\n    const headwords = {};\n    const { dictionary } = this;\n\n    this.matchers.forEach((matcher) => {\n      if (matcher[key]) {\n        matcher[key].forEach((headword) => {\n          if (!headwords[headword]) {\n            headwords[headword] = true;\n\n            results.push({ headword, definition: dictionary[headword] });\n          }\n        });\n      }\n    });\n\n    return results;\n  }\n}\n\nexport default Parser;\n","import Lookup from './Lookup';\n\nexport default Lookup;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport Parser from '../../lib/Parser';\n\nconst dictionaryPropType = PropTypes.shape({\n  dictionary: PropTypes.object.isRequired,\n  exact: PropTypes.object.isRequired,\n  greek: PropTypes.object.isRequired,\n  latin: PropTypes.object.isRequired,\n});\n\nconst historyPropType = PropTypes.shape({\n  push: PropTypes.func.isRequired,\n});\n\nconst matchPropType = PropTypes.shape({\n  params: PropTypes.shape({\n    word: PropTypes.string,\n  }).isRequired,\n});\n\nclass Lookup extends Component {\n  static propTypes = {\n    dictionary: dictionaryPropType.isRequired,\n    history: historyPropType.isRequired,\n    match: matchPropType.isRequired,\n  }\n\n  constructor(props) {\n    super(props);\n\n    const { dictionary } = this.props;\n\n    this.parser = new Parser(dictionary);\n    this.handleChange = this.handleChange.bind(this);\n    this.renderEntries = this.renderEntries.bind(this);\n  }\n\n  handleChange(event) {\n    const { value } = event.target;\n    const { history } = this.props;\n\n    history.push(`/${value}`);\n  }\n\n  renderEntries(word) {\n    const entries = this.parser.lookup(word);\n\n    return entries.map(entry => <p className=\"text-left\" key={entry.headword} dangerouslySetInnerHTML={{ __html: entry.definition }} />); // eslint-disable-line react/no-danger\n  }\n\n  render() {\n    const { match } = this.props;\n    const word = match.params.word || '';\n\n    return (\n      <div className=\"mt-4\">\n        {/* eslint-disable-next-line jsx-a11y/no-autofocus */}\n        <input className=\"form-control mb-4\" autoFocus type=\"text\" value={word} onChange={this.handleChange} placeholder=\"Enter word...\" aria-label=\"lookup\" />\n        {this.renderEntries(word)}\n      </div>\n    );\n  }\n}\n\nexport default Lookup;\n","import React from 'react';\nimport Loadable from 'react-loadable';\nimport localForage from 'localforage';\n\nimport Loading from '../Loading';\nimport Lookup from '../Lookup';\n\nconst DICTIONARY_VERSION = 'dictionary-0.0.3';\n\nconst cacheDictionary = (loaded) => {\n  const dictionary = loaded.default;\n\n  localForage.clear().then(() => localForage.setItem(DICTIONARY_VERSION, dictionary));\n\n  return dictionary;\n};\n\nconst lookupDictionary = () => (\n  localForage.getItem(DICTIONARY_VERSION).then(d => (\n    { success: !!d, dictionary: d }\n  )).catch(() => (\n    { success: false }\n  ))\n);\n\nconst WaitForDownload = Loadable({\n  loader: () => import('../../lib/Dictionary').then(cacheDictionary),\n  loading: () => <Loading text=\"Downloading dictionary...\" />,\n  render(dictionary, props) {\n    return <Lookup {...props} dictionary={dictionary} />;\n  },\n});\n\nconst AsyncLookup = Loadable({\n  loader: lookupDictionary,\n  loading: () => <Loading text=\"Loading dictionary from cache...\" />,\n  render(loaded, props) {\n    if (loaded.success) {\n      return <Lookup {...props} dictionary={loaded.dictionary} />;\n    }\n\n    return <WaitForDownload {...props} />;\n  },\n});\n\nexport default AsyncLookup;\n","import AsyncLookup from './AsyncLookup';\n\nexport default AsyncLookup;\n","import App from './App';\n\nexport default App;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { PerseidsHeader, PerseidsFooter } from 'perseids-react-components';\n\nimport 'perseids-react-components/build/css/index.css';\n\nimport AsyncLookup from '../AsyncLookup';\n\nconst App = () => (\n  <React.Fragment>\n    <PerseidsHeader>\n      LSJ Lexicon\n    </PerseidsHeader>\n    <div className=\"container text-center\">\n      <header>\n        <h1 className=\"h3 pt-4 mb-1 font-weight-normal\">\n          Liddell-Scott-Jones Greek-English Lexicon\n        </h1>\n      </header>\n      <main>\n        <div className=\"mb-4\">\n          <Router basename={process.env.PUBLIC_URL}>\n            <Route path=\"/:word?\" component={AsyncLookup} />\n          </Router>\n        </div>\n      </main>\n    </div>\n    <PerseidsFooter\n      github=\"https://github.com/perseids-project/lsj-js\"\n      report=\"https://github.com/perseids-project/lsj-js/issues\"\n    />\n  </React.Fragment>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}