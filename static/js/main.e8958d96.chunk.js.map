{"version":3,"sources":["components/Loading/Loading.module.css","components/I18n/I18n.js","components/I18n/index.js","components/Loading/Loading.js","components/Loading/index.js","lib/Parser.js","components/Lookup/Lookup.js","components/Lookup/index.js","components/AsyncLookup/AsyncLookup.js","components/AsyncLookup/index.js","components/App/App.js","components/App/index.js","registerServiceWorker.js","index.js"],"names":["module","exports","I18n","createI18n","en","header","title","fulltitle","input","placeholder","Loading","text","className","styles","loadingSpinner","Parser","constructor","dictionary","this","matchers","exact","greek","latin","lookup","string","key","toLowerCase","normalize","results","headwords","forEach","matcher","headword","push","definition","Lookup","Component","props","super","parser","handleChange","bind","renderEntries","event","value","target","history","word","map","entry","dangerouslySetInnerHTML","__html","render","match","location","params","autoFocus","type","onChange","getTranslation","aria-label","cacheDictionary","loaded","default","localForage","setItem","AsyncLookup","state","loadingText","componentDidMount","getItem","then","setState","asyncImport","App","basename","process","t","path","component","github","report","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","document","getElementById","URL","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"0FACAA,EAAOC,QAAU,CAAC,eAAiB,gCAAgC,KAAO,wB,mLCoB3DC,ICnBAA,EDcFC,qBAdG,CAAC,MAEI,CACnBC,GAAI,CACFC,OAAQ,CACNC,MAAO,cACPC,UAAW,6CAEbC,MAAO,CACLC,YAAa,qB,kCEKJC,ICdAA,EDGC,EAAGC,UACjB,yBAAKC,UAAU,QACb,yBAAKA,UAAS,UAAKC,IAAOC,eAAZ,WACbH,GEoBUI,MA5Bf,MACEC,YAAYC,GACVC,KAAKC,SAAW,CAACF,EAAWG,MAAOH,EAAWI,MAAOJ,EAAWK,OAChEJ,KAAKD,WAAaA,EAAWA,WAG/BM,OAAOC,GACL,MAAMC,EAAMD,EAAOE,cAAcC,YAC3BC,EAAU,GACVC,EAAY,GACVZ,EAAeC,KAAfD,WAcR,OAZAC,KAAKC,SAASW,QAASC,IACjBA,EAAQN,IACVM,EAAQN,GAAKK,QAASE,IACfH,EAAUG,KACbH,EAAUG,IAAY,EAEtBJ,EAAQK,KAAK,CAAED,WAAUE,WAAYjB,EAAWe,UAMjDJ,ICGX,MAAMO,UAAeC,YACnBpB,YAAYqB,GACVC,MAAMD,GADW,MAGTpB,EAAeC,KAAKmB,MAApBpB,WAERC,KAAKqB,OAAS,IAAIxB,EAAOE,GACzBC,KAAKsB,aAAetB,KAAKsB,aAAaC,KAAKvB,MAC3CA,KAAKwB,cAAgBxB,KAAKwB,cAAcD,KAAKvB,MAG/CsB,aAAaG,GAAQ,MACXC,EAAUD,EAAME,OAAhBD,MACY1B,KAAKmB,MAAjBS,QAEAb,KAAR,WAAiBW,IAGnBF,cAAcK,GAGZ,OAFgB7B,KAAKqB,OAAOhB,OAAOwB,GAEpBC,IAAKC,GAAU,uBAAGrC,UAAU,YAAYa,IAAKwB,EAAMjB,SAAUkB,wBAAyB,CAAEC,OAAQF,EAAMf,eAGvHkB,SAAU,MAAD,EACqBlC,KAAKmB,MAAzBgB,EADD,EACCA,MAAOC,EADR,EACQA,SACTP,EAAOM,EAAME,OAAOR,MAAQ,GAElC,OACE,yBAAKnC,UAAU,QACb,2BACEA,UAAU,oBAEV4C,WAAS,EACTC,KAAK,OACLb,MAAOG,EACPW,SAAUxC,KAAKsB,aACf/B,YAAaP,EAAKyD,eAAeL,EAAU,qBAC3CM,aAAW,WAGZ1C,KAAKwB,cAAcK,KAabZ,IC/EAA,ED+EAA,EE3Ef,MAEM0B,EAAmBC,IACvB,MAAM7C,EAAa6C,EAAOC,QAI1B,OAFAC,IAAYC,QALa,mBAKehD,GAEjCA,GAGT,MAAMiD,UAAoB9B,YACxBpB,YAAYqB,GACVC,MAAMD,GAENnB,KAAKiD,MAAQ,CACXC,YAAa,mCACbnD,WAAY,MAIhBoD,oBACEL,IAAYM,QArBW,oBAqBiBC,KAAMtD,IACxCA,EACFC,KAAKsD,SAAS,CAAEvD,eAEhBC,KAAKsD,SAAS,CAAEJ,YAAa,6BAA+BlD,KAAKuD,eAKvEA,cACE,6BAA+BF,KAAKV,GAAiBU,KAAMtD,IACzDC,KAAKsD,SAAS,CAAEvD,iBAIpBmC,SAAU,MAAD,EAIHlC,KAAKiD,MAFPC,EAFK,EAELA,YACAnD,EAHK,EAGLA,WAGF,OAAmB,OAAfA,EACK,kBAAC,EAAD,CAASN,KAAMyD,IAGjB,kBAAC,EAAD,iBAAYlD,KAAKmB,MAAjB,CAAwBpB,WAAYA,MAIhCiD,ICtDAA,EDsDAA,EErBAQ,ICjCAA,EDOH,IACV,kBAAC,gBAAD,CAAQC,SAAUC,WAChB,oCACE,kBAAC,iBAAD,KACE,kBAAC,EAAD,CAAMC,EAAE,kBAEV,yBAAKjE,UAAU,yBACb,gCACE,wBAAIA,UAAU,mCACZ,kBAAC,EAAD,CAAMiE,EAAE,uBAGZ,8BACE,yBAAKjE,UAAU,QACb,kBAAC,IAAD,CAAOkE,KAAK,UAAUC,UAAWb,OAIvC,kBAAC,iBAAD,CACEc,OAAO,6CACPC,OAAO,wDEnBf,MAAMC,EAAcC,QACW,cAA7BC,OAAO9B,SAAS+B,UAEe,UAA7BD,OAAO9B,SAAS+B,UAEhBD,OAAO9B,SAAS+B,SAAShC,MACvB,2DAsCN,SAASiC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACThB,KAAKoB,IACJA,EAAaC,cAAgB,KAC3B,MAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,KACA,cAA3BF,EAAiB1B,QACfqB,UAAUC,cAAcO,WAK1BC,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBC,MAAMC,IACLH,QAAQG,MAAM,4CAA6CA,K,MCxEjEC,IAASjD,OAAO,kBAAC,EAAD,MAASkD,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAI5B,UAAwBQ,OAAO9B,UAC3CmD,SAAWrB,OAAO9B,SAASmD,OAIvC,OAGFrB,OAAOsB,iBAAiB,OAAQ,KAC9B,MAAMnB,EAAK,UAAMX,UAAN,sBAEPM,IAiDV,SAAiCK,GAE/BoB,MAAMpB,GACHhB,KAAKqC,IAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQC,IAAI,gBAAgBC,QAAQ,cAG7CxB,UAAUC,cAAcwB,MAAM1C,KAAKoB,IACjCA,EAAauB,aAAa3C,KAAK,KAC7Ba,OAAO9B,SAAS6D,aAKpB7B,EAAgBC,KAGnBY,MAAM,KACLF,QAAQC,IACN,mEArEAkB,CAAwB7B,GAIxBC,UAAUC,cAAcwB,MAAM1C,KAAK,KACjC0B,QAAQC,IACN,+GAMJZ,EAAgBC,MCxCxB8B,K","file":"static/js/main.e8958d96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"loadingSpinner\":\"Loading_loadingSpinner__3AFTQ\",\"spin\":\"Loading_spin__27TzB\"};","import { createI18n } from 'react-router-i18n';\n\nconst locales = ['en'];\n\nconst translations = {\n  en: {\n    header: {\n      title: 'LSJ Lexicon',\n      fulltitle: 'Liddell-Scott-Jones Greek-English Lexicon',\n    },\n    input: {\n      placeholder: 'Enter word ...',\n    },\n  },\n};\n\nconst I18n = createI18n(\n  locales,\n  translations,\n);\n\nexport default I18n;\n","import I18n from './I18n';\n\nexport default I18n;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport styles from './Loading.module.css';\n\nconst Loading = ({ text }) => (\n  <div className=\"mt-2\">\n    <div className={`${styles.loadingSpinner} mb-2`} />\n    {text}\n  </div>\n);\n\nLoading.propTypes = {\n  text: PropTypes.string.isRequired,\n};\n\nexport default Loading;\n","import Loading from './Loading';\n\nexport default Loading;\n","class Parser {\n  constructor(dictionary) {\n    this.matchers = [dictionary.exact, dictionary.greek, dictionary.latin];\n    this.dictionary = dictionary.dictionary;\n  }\n\n  lookup(string) {\n    const key = string.toLowerCase().normalize();\n    const results = [];\n    const headwords = {};\n    const { dictionary } = this;\n\n    this.matchers.forEach((matcher) => {\n      if (matcher[key]) {\n        matcher[key].forEach((headword) => {\n          if (!headwords[headword]) {\n            headwords[headword] = true;\n\n            results.push({ headword, definition: dictionary[headword] });\n          }\n        });\n      }\n    });\n\n    return results;\n  }\n}\n\nexport default Parser;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport I18n from '../I18n';\nimport Parser from '../../lib/Parser';\n\nconst dictionaryPropType = PropTypes.shape({\n  dictionary: PropTypes.object.isRequired,\n  exact: PropTypes.object.isRequired,\n  greek: PropTypes.object.isRequired,\n  latin: PropTypes.object.isRequired,\n});\n\nconst historyPropType = PropTypes.shape({\n  push: PropTypes.func.isRequired,\n});\n\nconst matchPropType = PropTypes.shape({\n  params: PropTypes.shape({\n    word: PropTypes.string,\n  }).isRequired,\n});\n\nconst locationPropType = PropTypes.shape({\n  pathname: PropTypes.string.isRequired,\n});\n\nclass Lookup extends Component {\n  constructor(props) {\n    super(props);\n\n    const { dictionary } = this.props;\n\n    this.parser = new Parser(dictionary);\n    this.handleChange = this.handleChange.bind(this);\n    this.renderEntries = this.renderEntries.bind(this);\n  }\n\n  handleChange(event) {\n    const { value } = event.target;\n    const { history } = this.props;\n\n    history.push(`/${value}`);\n  }\n\n  renderEntries(word) {\n    const entries = this.parser.lookup(word);\n\n    return entries.map((entry) => <p className=\"text-left\" key={entry.headword} dangerouslySetInnerHTML={{ __html: entry.definition }} />); // eslint-disable-line react/no-danger\n  }\n\n  render() {\n    const { match, location } = this.props;\n    const word = match.params.word || '';\n\n    return (\n      <div className=\"mt-4\">\n        <input\n          className=\"form-control mb-4\"\n          /* eslint-disable-next-line jsx-a11y/no-autofocus */\n          autoFocus\n          type=\"text\"\n          value={word}\n          onChange={this.handleChange}\n          placeholder={I18n.getTranslation(location, 'input.placeholder')}\n          aria-label=\"lookup\"\n        />\n\n        {this.renderEntries(word)}\n      </div>\n    );\n  }\n}\n\nLookup.propTypes = {\n  dictionary: dictionaryPropType.isRequired,\n  history: historyPropType.isRequired,\n  match: matchPropType.isRequired,\n  location: locationPropType.isRequired,\n};\n\nexport default Lookup;\n","import Lookup from './Lookup';\n\nexport default Lookup;\n","import React, { Component } from 'react';\nimport localForage from 'localforage';\n\nimport Loading from '../Loading';\nimport Lookup from '../Lookup';\n\nconst DICTIONARY_VERSION = 'dictionary-0.0.3';\n\nconst cacheDictionary = (loaded) => {\n  const dictionary = loaded.default;\n\n  localForage.setItem(DICTIONARY_VERSION, dictionary);\n\n  return dictionary;\n};\n\nclass AsyncLookup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loadingText: 'Loading dictionary from cache...',\n      dictionary: null,\n    };\n  }\n\n  componentDidMount() {\n    localForage.getItem(DICTIONARY_VERSION).then((dictionary) => {\n      if (dictionary) {\n        this.setState({ dictionary });\n      } else {\n        this.setState({ loadingText: 'Downloading dictionary...' }, this.asyncImport);\n      }\n    });\n  }\n\n  asyncImport() {\n    import('../../lib/Dictionary').then(cacheDictionary).then((dictionary) => {\n      this.setState({ dictionary });\n    });\n  }\n\n  render() {\n    const {\n      loadingText,\n      dictionary,\n    } = this.state;\n\n    if (dictionary === null) {\n      return <Loading text={loadingText} />;\n    }\n\n    return <Lookup {...this.props} dictionary={dictionary} />;\n  }\n}\n\nexport default AsyncLookup;\n","import AsyncLookup from './AsyncLookup';\n\nexport default AsyncLookup;\n","import React from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport { PerseidsHeader, PerseidsFooter } from 'perseids-react-components';\n\nimport 'perseids-react-components/build/css/index.css';\n\nimport I18n from '../I18n';\nimport AsyncLookup from '../AsyncLookup';\n\nconst App = () => (\n  <Router basename={process.env.PUBLIC_URL}>\n    <>\n      <PerseidsHeader>\n        <I18n t=\"header.title\" />\n      </PerseidsHeader>\n      <div className=\"container text-center\">\n        <header>\n          <h1 className=\"h3 pt-4 mb-1 font-weight-normal\">\n            <I18n t=\"header.fulltitle\" />\n          </h1>\n        </header>\n        <main>\n          <div className=\"mb-4\">\n            <Route path=\"/:word?\" component={AsyncLookup} />\n          </div>\n        </main>\n      </div>\n      <PerseidsFooter\n        github=\"https://github.com/perseids-project/lsj-js\"\n        report=\"https://github.com/perseids-project/lsj-js/issues\"\n      />\n    </>\n  </Router>\n);\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}